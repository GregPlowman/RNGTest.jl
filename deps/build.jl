using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libtestu01"], :libtestu01),
    LibraryProduct(prefix, String["libprobdist"], :libprobdist),
    LibraryProduct(prefix, String["libtestu01extractors"], :libtestu01extractors),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/andreasnoack/TestU01Builder/releases/download/v1.2.3-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/TestU01.aarch64-linux-gnu.tar.gz", "20b8be5b3818c4ae954ea147bf98af8b066dbcabdbe4f7da193172b4b58b0e72"),
    Linux(:aarch64, :musl) => ("$bin_prefix/TestU01.aarch64-linux-musl.tar.gz", "c440f4d075ce8cad36f5e6759fc1175d03db755952dce0e1b6139da92c87bdf7"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/TestU01.arm-linux-gnueabihf.tar.gz", "6cb1bfcd9a875eeb1f89ba3ec66073c35216d49cb4ade1d57b55eb7510049d2d"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/TestU01.arm-linux-musleabihf.tar.gz", "a5691f2f02fcdae95b20fc2d058b1ada32bbd4cf0d56b8e4b0b4b01d2c8b4e4c"),
    Linux(:i686, :glibc) => ("$bin_prefix/TestU01.i686-linux-gnu.tar.gz", "9cd9e7021701133234cc147a748f7a96f3f53002e0f1c045602eab3137e811c4"),
    Linux(:i686, :musl) => ("$bin_prefix/TestU01.i686-linux-musl.tar.gz", "ab4469d1a60c0a834127a17aa1a08b2b15043adf760eaa18f136a155d4578c6c"),
    Windows(:i686) => ("$bin_prefix/TestU01.i686-w64-mingw32.tar.gz", "7cc5eedf3b5c61aa06f89aa4f7ed65fc841d6cd184db63006181976354e722be"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/TestU01.powerpc64le-linux-gnu.tar.gz", "59e6b7aaedfb43cc8deb465f3281f3823e47e3b3e46f536d6987cc53c35dc492"),
    MacOS(:x86_64) => ("$bin_prefix/TestU01.x86_64-apple-darwin14.tar.gz", "64123b447e981cdcc2f47fcf85dc18cec5ddcf93b2327711a15dd9d4425bd1f3"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/TestU01.x86_64-linux-gnu.tar.gz", "a96b263d8165ec5e6ce0171a536bf099d1c1121e2707878554dd70402fcd7aff"),
    Linux(:x86_64, :musl) => ("$bin_prefix/TestU01.x86_64-linux-musl.tar.gz", "33b309fb47a4fe10dd20dab1f17d77818168cd00846bcd2287197a8bb5ca58cc"),
    FreeBSD(:x86_64) => ("$bin_prefix/TestU01.x86_64-unknown-freebsd11.1.tar.gz", "c5df1b42f231eb3d7a3283ab0413c61248247569eb69d979f55e6880342b8bf3"),
    Windows(:x86_64) => ("$bin_prefix/TestU01.x86_64-w64-mingw32.tar.gz", "8aa8c8b2052cb555f6313a7444f673f202f52060156728494fc1eaf885fab779"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
